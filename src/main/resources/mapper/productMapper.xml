<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.application.usedallea.product.dao.ProductDAO">
    <insert id="createProduct" parameterType="ProductDTO">
        INSERT INTO PRODUCT(
            SELLER_ID,
            IMG_ID,
            TITLE,
            CATEGORY,
            QUALITY_CONDITION,
            PRICE,
            DESCRIPTION,
            STATUS
        )
        VALUES(
            #{sellerId},
            #{imgId},
            #{title},
            #{category},
            #{qualityCondition},
            #{price},
            #{description},
            #{status}
        )
    </insert>

    <select id="getAllProductList" resultType="ProductDTO">
        SELECT
            PRODUCT_ID,
            SELLER_ID,
            PRICE,
            DESCRIPTION,
            QUALITY_CONDITION,
            CATEGORY,
            CREATED_AT,
            UPDATED_AT,
            READ_COUNT,
            STATUS,
            TITLE,
            IMG_ID
        FROM
                PRODUCT
        ORDER BY
                CREATED_AT DESC
    </select>

    <select id="getProductId" parameterType="long" resultType="long">
        SELECT
                PRODUCT_ID
        FROM
                PRODUCT
        WHERE
                IMG_ID = #{imgId}
    </select>

    <select id="getProductDetail"  parameterType="long" resultType="ProductDTO">
        SELECT
                PRODUCT_ID,
                SELLER_ID,
                IMG_ID,
                PRICE,
                DESCRIPTION,
                QUALITY_CONDITION,
                CATEGORY,
                READ_COUNT,
                STATUS,
                TITLE,
                CREATED_AT
        FROM
                PRODUCT
        WHERE
                PRODUCT_ID = #{productId}
    </select>
    <update id="updateReadCnt" parameterType="long">
        UPDATE
                PRODUCT
        SET
                READ_COUNT = READ_COUNT + 1
        WHERE
                PRODUCT_ID = #{productId}
    </update>

    <select id="getImgUUIDList" parameterType="long" resultType="String">
        SELECT
               I.IMG_UUID AS IMG_UUID
        FROM
                PRODUCT P
           JOIN IMG I
            ON  P.IMG_ID = I.IMG_ID
        WHERE
                PRODUCT_ID = #{productId}
    </select>

    <update id="updateProduct" parameterType="ProductDTO">
        UPDATE
                PRODUCT
        SET
                TITLE = #{title},
                CATEGORY = #{category},
                QUALITY_CONDITION = #{qualityCondition},
                PRICE = #{price},
                DESCRIPTION = #{description},
                UPDATED_AT = NOW()
        WHERE
                PRODUCT_ID = #{productId}
    </update>

    <delete id="deleteProduct" parameterType="long">
        DELETE FROM
                    PRODUCT
        WHERE
                PRODUCT_ID = #{productId}
    </delete>

    <select id="getAllProductCnt" parameterType="hashmap" resultType="int">
        SELECT
            COUNT(*)
        FROM
            PRODUCT
        <where>
            <if test="searchWord != ''">
                CATEGORY LIKE CONCAT('%', #{searchWord}, '%') OR
                TITLE LIKE CONCAT('%', #{searchWord}, '%') OR
                DESCRIPTION LIKE CONCAT('%', #{searchWord}, '%')
            </if>
        </where>
    </select>

    <select id="getProductList" parameterType="hashmap" resultType="ProductDTO">
        <choose>
            <when test="searchWord.equals('')">
                SELECT
                    PRODUCT_ID,
                    SELLER_ID,
                    PRICE,
                    DESCRIPTION,
                    QUALITY_CONDITION,
                    CREATED_AT,
                    UPDATED_AT,
                    READ_COUNT,
                    STATUS,
                    TITLE,
                    IMG_ID
                FROM
                    PRODUCT
                ORDER BY
                    CREATED_AT DESC
                LIMIT
                    #{startProductIdx}, #{onePageProductCnt}

            </when>
            <otherwise>
                SELECT
                        PRODUCT_ID,
                        SELLER_ID,
                        PRICE,
                        DESCRIPTION,
                        QUALITY_CONDITION,
                        CREATED_AT,
                        UPDATED_AT,
                        READ_COUNT,
                        STATUS,
                        TITLE,
                        IMG_ID
                FROM
                        PRODUCT
               <where>
                   <if test="searchWord != ''">
                       CATEGORY LIKE CONCAT('%', #{searchWord}, '%') OR
                       TITLE LIKE CONCAT('%', #{searchWord}, '%') OR
                       DESCRIPTION LIKE CONCAT('%', #{searchWord}, '%')
                   </if>
               </where>
                ORDER BY
                        CREATED_AT DESC
                LIMIT
                        #{startProductIdx}, #{onePageProductCnt}
            </otherwise>
        </choose>
    </select>

    <select id="getAllProductCntBySeller" parameterType="hashmap" resultType="int">
       <choose>
           <when test="searchTitle == ''">
               SELECT
                    COUNT(*)
               FROM
                   PRODUCT
               WHERE
                   SELLER_ID = #{sellerId}
           </when>
           <otherwise>
               SELECT
                   COUNT(*)
               FROM
                   PRODUCT
               WHERE
                    SELLER_ID = #{sellerId}
               AND(
               CATEGORY LIKE CONCAT('%', #{searchTitle}, '%') OR
               TITLE LIKE CONCAT('%', #{searchTitle}, '%') OR
               DESCRIPTION LIKE CONCAT('%', #{searchTitle}, '%')
               )
           </otherwise>
       </choose>
    </select>

    <select id="getProductListBySeller" parameterType="hashmap" resultType="ProductDTO">
        <choose>
            <when test="searchTitle == ''">
                SELECT
                    PRODUCT_ID,
                    SELLER_ID,
                    PRICE,
                    UPDATED_AT,
                    READ_COUNT,
                    STATUS,
                    TITLE,
                    IMG_ID
                FROM
                    PRODUCT
                WHERE
                    SELLER_ID = #{sellerId}
                ORDER BY
                    CREATED_AT DESC
                LIMIT
                    #{startProductIdx}, #{onePageProductCnt}
            </when>
            <otherwise>
                SELECT
                    PRODUCT_ID,
                    SELLER_ID,
                    PRICE,
                    UPDATED_AT,
                    READ_COUNT,
                    STATUS,
                    TITLE,
                    IMG_ID
                FROM
                    PRODUCT
                <where>
                    SELLER_ID = #{sellerId}
                    AND (
                    CATEGORY LIKE CONCAT('%', #{searchTitle}, '%') OR
                    TITLE LIKE CONCAT('%', #{searchTitle}, '%') OR
                    DESCRIPTION LIKE CONCAT('%', #{searchTitle}, '%')
                    )
                </where>
                ORDER BY
                    CREATED_AT DESC
                LIMIT
                    #{startProductIdx}, #{onePageProductCnt}
            </otherwise>
        </choose>
    </select>


</mapper>